from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from states.workout_logging_states import WorkoutLoggingStates
from typing import Optional

async def cleanup_previous_messages(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    # –û—á–∏—Å—Ç–∫–∞ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –º–æ–¥—É–ª–µ
    pass

async def track_message(context: ContextTypes.DEFAULT_TYPE, message_id: int):
    """–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—á–∏—Å—Ç–∫–∏"""
    # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –º–æ–¥—É–ª–µ
    pass

async def get_recent_exercises(user_id: int) -> list[str]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
    return [
        "–ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è —Å–æ —à—Ç–∞–Ω–≥–æ–π",
        "–ñ–∏–º –ª–µ–∂–∞",
        "–°—Ç–∞–Ω–æ–≤–∞—è —Ç—è–≥–∞",
        "–ü–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏—è",
        "–û—Ç–∂–∏–º–∞–Ω–∏—è"
    ]

async def start_strength_logging(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤–Ω–µ—Å–µ–Ω–∏—è —Å–∏–ª–æ–≤–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
    await cleanup_previous_messages(update, context)
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤—ã–±–æ—Ä–∞
    user_exercises = await get_recent_exercises(update.effective_user.id)
    
    text = "üèãÔ∏è‚Äç‚ôÇÔ∏è *–í–Ω–µ—Å–µ–Ω–∏–µ —Å–∏–ª–æ–≤–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ:"
    
    keyboard = []
    for exercise in user_exercises[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º 5 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
        keyboard.append([InlineKeyboardButton(exercise, callback_data=f"select_exercise:{exercise}")])
    
    keyboard.extend([
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ", callback_data="add_new_exercise")],
        [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="log_workout")]
    ])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    message = await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    
    await track_message(context, message.message_id)
    return WorkoutLoggingStates.SELECT_EXERCISE

async def log_sets_reps(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–≤–æ–¥ –ø–æ–¥—Ö–æ–¥–æ–≤ –∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π"""
    query = update.callback_query
    exercise_name = query.data.split(":")[1] if ":" in query.data else "–ù–æ–≤–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ"
    
    context.user_data['current_exercise'] = exercise_name
    
    text = f"""
üìä *–í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {exercise_name}*

–í–≤–µ–¥–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—ã –∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
‚Ä¢ 3x10 (3 –ø–æ–¥—Ö–æ–¥–∞ –ø–æ 10 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π)
‚Ä¢ 4x8-12 (4 –ø–æ–¥—Ö–æ–¥–∞ –ø–æ 8-12 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π)
‚Ä¢ 3x5, 1xAMRAP (3 –ø–æ–¥—Ö–æ–¥–∞ –ø–æ 5, 1 –ø–æ–¥—Ö–æ–¥ –¥–æ –æ—Ç–∫–∞–∑–∞)
"""
    
    keyboard = [
        [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="log_strength")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        text=text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    
    return WorkoutLoggingStates.LOG_SETS_REPS

async def process_sets_reps(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –ø–æ–¥—Ö–æ–¥–æ–≤ –∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π"""
    sets_reps = update.message.text
    context.user_data['sets_reps'] = sets_reps
    
    text = "üí™ *–í–≤–µ–¥–∏—Ç–µ —Ä–∞–±–æ—á–∏–π –≤–µ—Å –≤ –∫–≥* (–∏–ª–∏ 0 –µ—Å–ª–∏ –±–µ–∑ –≤–µ—Å–∞):"
    
    keyboard = [
        [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data=f"select_exercise:{context.user_data['current_exercise']}")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    message = await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    
    await track_message(context, message.message_id)
    return WorkoutLoggingStates.LOG_WEIGHT

async def process_weight(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –≤–µ—Å–∞"""
    try:
        weight = float(update.message.text)
        context.user_data['weight'] = weight
        
        text = """
üòÖ *–û—Ü–µ–Ω–∏—Ç–µ —Å–ª–æ–∂–Ω–æ—Å—Ç—å (RPE)*:
‚Ä¢ 10 - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —É—Å–∏–ª–∏–µ
‚Ä¢ 9 - –û—á–µ–Ω—å —Ç—è–∂–µ–ª–æ, –ø–æ—á—Ç–∏ –º–∞–∫—Å–∏–º—É–º
‚Ä¢ 8 - –¢—è–∂–µ–ª–æ, –Ω–æ –µ—Å—Ç—å –∑–∞–ø–∞—Å
‚Ä¢ 7 - –£–º–µ—Ä–µ–Ω–Ω–æ —Ç—è–∂–µ–ª–æ
‚Ä¢ 6 - –ö–æ–º—Ñ–æ—Ä—Ç–Ω–æ
‚Ä¢ 5 –∏ –º–µ–Ω—å—à–µ - –õ–µ–≥–∫–æ
"""
        keyboard = [
            [InlineKeyboardButton("6", callback_data="rpe_6"), 
             InlineKeyboardButton("7", callback_data="rpe_7"), 
             InlineKeyboardButton("8", callback_data="rpe_8")],
            [InlineKeyboardButton("9", callback_data="rpe_9"), 
             InlineKeyboardButton("10", callback_data="rpe_10"),
             InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="rpe_skip")],
            [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_sets_reps")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        message = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        
        await track_message(context, message.message_id)
        return WorkoutLoggingStates.LOG_RPE
        
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 50 –∏–ª–∏ 27.5)")
        return WorkoutLoggingStates.LOG_WEIGHT

async def process_rpe(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ RPE"""
    query = update.callback_query
    rpe = query.data.split("_")[1] if query.data != "rpe_skip" else None
    
    if rpe and rpe != "skip":
        context.user_data['rpe'] = int(rpe)
    
    text = """
üìù *–î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫–∏ –æ —Ç–µ—Ö–Ω–∏–∫–µ?*

–ù–∞–ø–∏—à–∏—Ç–µ –∑–∞–º–µ—Ç–∫–∏ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
‚Ä¢ –û—à–∏–±–∫–∏ –≤ —Ç–µ—Ö–Ω–∏–∫–µ
‚Ä¢ –û—â—É—â–µ–Ω–∏—è
‚Ä¢ –ß—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å/–Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å
"""
    
    keyboard = [
        [InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="notes_skip")],
        [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_weight")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        text=text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    
    return WorkoutLoggingStates.ADD_NOTES

async def process_notes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–º–µ—Ç–æ–∫"""
    if update.message and update.message.text:
        context.user_data['exercise_notes'] = update.message.text
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—é
    exercise_name = context.user_data.get('current_exercise', '–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ')
    sets_reps = context.user_data.get('sets_reps', '')
    weight = context.user_data.get('weight', 0)
    rpe = context.user_data.get('rpe', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
    notes = context.user_data.get('exercise_notes', '–ë–µ–∑ –∑–∞–º–µ—Ç–æ–∫')
    
    text = f"""
‚úÖ *–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!*

üèãÔ∏è‚Äç‚ôÇÔ∏è **{exercise_name}**
üìä –ü–æ–¥—Ö–æ–¥—ã: {sets_reps}
üí™ –í–µ—Å: {weight} –∫–≥
üòÖ RPE: {rpe}
üìù –ó–∞–º–µ—Ç–∫–∏: {notes}

–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–Ω–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ?
"""
    
    keyboard = [
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ", callback_data="add_another_exercise")],
        [InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É", callback_data="finish_workout")],
        [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="log_strength")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    message = await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    
    await track_message(context, message.message_id)
    return WorkoutLoggingStates.CONFIRMATION

async def add_new_exercise(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è"""
    query = update.callback_query
    
    text = """
‚ûï *–ù–æ–≤–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ*

–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:
"""
    
    keyboard = [
        [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="log_strength")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        text=text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
    context.user_data['waiting_for_exercise_name'] = True
    return WorkoutLoggingStates.SELECT_EXERCISE

async def process_new_exercise_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è"""
    if not update.message or not update.message.text:
        return WorkoutLoggingStates.SELECT_EXERCISE
    
    exercise_name = update.message.text.strip()
    context.user_data['current_exercise'] = exercise_name
    context.user_data['waiting_for_exercise_name'] = False
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –ø–æ–¥—Ö–æ–¥–æ–≤ –∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
    text = f"""
üìä *–í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {exercise_name}*

–í–≤–µ–¥–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—ã –∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
‚Ä¢ 3x10 (3 –ø–æ–¥—Ö–æ–¥–∞ –ø–æ 10 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π)
‚Ä¢ 4x8-12 (4 –ø–æ–¥—Ö–æ–¥–∞ –ø–æ 8-12 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π)
‚Ä¢ 3x5, 1xAMRAP (3 –ø–æ–¥—Ö–æ–¥–∞ –ø–æ 5, 1 –ø–æ–¥—Ö–æ–¥ –¥–æ –æ—Ç–∫–∞–∑–∞)
"""
    
    keyboard = [
        [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="log_strength")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    message = await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    
    await track_message(context, message.message_id)
    return WorkoutLoggingStates.LOG_SETS_REPS

async def finish_workout(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
    query = update.callback_query
    
    # TODO: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    
    text = """
üéâ *–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!*

–í–∞—à–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.

üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*
‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π: {count}
‚Ä¢ –û–±—â–∏–π –æ–±—ä–µ–º: {volume} –∫–≥
‚Ä¢ –í—Ä–µ–º—è: {duration} –º–∏–Ω

+10 –±–∞–ª–ª–æ–≤ –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É! üéÅ
"""
    
    keyboard = [
        [InlineKeyboardButton("üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data="workout_stats")],
        [InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu_root")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        text=text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    
    return WorkoutLoggingStates.CONFIRMATION