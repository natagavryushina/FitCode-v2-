from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
from states.workout_logging_states import WorkoutLoggingStates
from typing import Optional

async def cleanup_previous_messages(update: Update, context: ContextTypes.DEFAULT_TYPE):
	"""–û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
	# –û—á–∏—Å—Ç–∫–∞ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –º–æ–¥—É–ª–µ
	pass

async def track_message(context: ContextTypes.DEFAULT_TYPE, message_id: int):
	"""–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—á–∏—Å—Ç–∫–∏"""
	# –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –º–æ–¥—É–ª–µ
	pass

async def get_recent_exercises(user_id: int) -> list[str]:
	"""–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
	# TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
	# –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
	return [
		"–ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è —Å–æ —à—Ç–∞–Ω–≥–æ–π",
		"–ñ–∏–º –ª–µ–∂–∞",
		"–°—Ç–∞–Ω–æ–≤–∞—è —Ç—è–≥–∞",
		"–ü–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏—è",
		"–û—Ç–∂–∏–º–∞–Ω–∏—è"
	]

async def start_strength_logging(update: Update, context: ContextTypes.DEFAULT_TYPE):
	"""–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤–Ω–µ—Å–µ–Ω–∏—è —Å–∏–ª–æ–≤–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
	await cleanup_previous_messages(update, context)
	
	# –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤—ã–±–æ—Ä–∞
	user_exercises = await get_recent_exercises(update.effective_user.id)
	
	text = "üèãÔ∏è‚Äç‚ôÇÔ∏è *–í–Ω–µ—Å–µ–Ω–∏–µ —Å–∏–ª–æ–≤–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ:"
	
	keyboard = []
	for exercise in user_exercises[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º 5 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
		keyboard.append([InlineKeyboardButton(exercise, callback_data=f"select_exercise:{exercise}")])
	
	keyboard.extend([
		[InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ", callback_data="add_new_exercise")],
		[InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="log_workout")],
		[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")]
	])
	
	reply_markup = InlineKeyboardMarkup(keyboard)
	
	message = await context.bot.send_message(
		chat_id=update.effective_chat.id,
		text=text,
		reply_markup=reply_markup,
		parse_mode='Markdown'
	)
	
	await track_message(context, message.message_id)
	return WorkoutLoggingStates.SELECT_EXERCISE

async def log_sets_reps(update: Update, context: ContextTypes.DEFAULT_TYPE):
	"""–í–≤–æ–¥ –ø–æ–¥—Ö–æ–¥–æ–≤ –∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π"""
	query = update.callback_query
	exercise_name = query.data.split(":")[1] if ":" in query.data else "–ù–æ–≤–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ"
	
	context.user_data['current_exercise'] = exercise_name
	
	text = f"""
üìä *–í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {exercise_name}*

–í–≤–µ–¥–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—ã –∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
‚Ä¢ 3x10 (3 –ø–æ–¥—Ö–æ–¥–∞ –ø–æ 10 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π)
‚Ä¢ 4x8-12 (4 –ø–æ–¥—Ö–æ–¥–∞ –ø–æ 8-12 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π)
‚Ä¢ 3x5, 1xAMRAP (3 –ø–æ–¥—Ö–æ–¥–∞ –ø–æ 5, 1 –ø–æ–¥—Ö–æ–¥ –¥–æ –æ—Ç–∫–∞–∑–∞)
"""
	
	keyboard = [
		[InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="log_strength")]
	]
	
	reply_markup = InlineKeyboardMarkup(keyboard)
	
	await query.edit_message_text(
		text=text,
		reply_markup=reply_markup,
		parse_mode='Markdown'
	)
	
	# –æ–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –ø–æ–¥—Ö–æ–¥–æ–≤/–ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
	context.user_data.setdefault('logging_workout', {})['step'] = 'sets_reps'
	return WorkoutLoggingStates.LOG_SETS_REPS

async def process_sets_reps(update: Update, context: ContextTypes.DEFAULT_TYPE):
	"""–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –ø–æ–¥—Ö–æ–¥–æ–≤ –∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π"""
	sets_reps = update.message.text
	context.user_data['sets_reps'] = sets_reps
	
	text = "üí™ *–í–≤–µ–¥–∏—Ç–µ —Ä–∞–±–æ—á–∏–π –≤–µ—Å –≤ –∫–≥* (–∏–ª–∏ 0 –µ—Å–ª–∏ –±–µ–∑ –≤–µ—Å–∞):"
	
	keyboard = [
		[InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data=f"select_exercise:{context.user_data['current_exercise']}")],
		[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")]
	]
	
	reply_markup = InlineKeyboardMarkup(keyboard)
	
	message = await context.bot.send_message(
		chat_id=update.effective_chat.id,
		text=text,
		reply_markup=reply_markup,
		parse_mode='Markdown'
	)
	
	# –æ–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –≤–µ—Å–∞
	context.user_data.setdefault('logging_workout', {})['step'] = 'weight'
	await track_message(context, message.message_id)
	return WorkoutLoggingStates.LOG_WEIGHT

async def process_weight(update: Update, context: ContextTypes.DEFAULT_TYPE):
	"""–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –≤–µ—Å–∞"""
	try:
		weight = float(update.message.text)
		context.user_data['weight'] = weight
		
		text = """
üòÖ *–û—Ü–µ–Ω–∏—Ç–µ —Å–ª–æ–∂–Ω–æ—Å—Ç—å (RPE)*:
‚Ä¢ 10 - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —É—Å–∏–ª–∏–µ
‚Ä¢ 9 - –û—á–µ–Ω—å —Ç—è–∂–µ–ª–æ, –ø–æ—á—Ç–∏ –º–∞–∫—Å–∏–º—É–º
‚Ä¢ 8 - –¢—è–∂–µ–ª–æ, –Ω–æ –µ—Å—Ç—å –∑–∞–ø–∞—Å
‚Ä¢ 7 - –£–º–µ—Ä–µ–Ω–Ω–æ —Ç—è–∂–µ–ª–æ
‚Ä¢ 6 - –ö–æ–º—Ñ–æ—Ä—Ç–Ω–æ
‚Ä¢ 5 –∏ –º–µ–Ω—å—à–µ - –õ–µ–≥–∫–æ
"""
		keyboard = [
			[InlineKeyboardButton("6", callback_data="rpe_6"), 
			 InlineKeyboardButton("7", callback_data="rpe_7"), 
			 InlineKeyboardButton("8", callback_data="rpe_8")],
			[InlineKeyboardButton("9", callback_data="rpe_9"), 
			 InlineKeyboardButton("10", callback_data="rpe_10"),
			 InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="rpe_skip")],
			[InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_sets_reps")],
			[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")]
		]
		
		reply_markup = InlineKeyboardMarkup(keyboard)
		
		message = await context.bot.send_message(
			chat_id=update.effective_chat.id,
			text=text,
			reply_markup=reply_markup,
			parse_mode='Markdown'
		)
		
		# –æ–∂–∏–¥–∞–Ω–∏–µ rpe
		context.user_data.setdefault('logging_workout', {})['step'] = 'rpe'
		await track_message(context, message.message_id)
		return WorkoutLoggingStates.LOG_RPE
		
	except ValueError:
		await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 50 –∏–ª–∏ 27.5)")
		return WorkoutLoggingStates.LOG_WEIGHT

async def process_rpe(update: Update, context: ContextTypes.DEFAULT_TYPE):
	"""–û–±—Ä–∞–±–æ—Ç–∫–∞ RPE"""
	query = update.callback_query
	rpe = query.data.split("_")[1] if query.data != "rpe_skip" else None
	
	if rpe and rpe != "skip":
		context.user_data['rpe'] = int(rpe)
	
	text = """
üìù *–î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫–∏ –æ —Ç–µ—Ö–Ω–∏–∫–µ?*

–ù–∞–ø–∏—à–∏—Ç–µ –∑–∞–º–µ—Ç–∫–∏ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
‚Ä¢ –û—à–∏–±–∫–∏ –≤ —Ç–µ—Ö–Ω–∏–∫–µ
‚Ä¢ –û—â—É—â–µ–Ω–∏—è
‚Ä¢ –ß—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å/–Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å
"""
	
	keyboard = [
		[InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="notes_skip")],
		[InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_weight")],
		[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")]
	]
	
	reply_markup = InlineKeyboardMarkup(keyboard)
	
	await query.edit_message_text(
		text=text,
		reply_markup=reply_markup,
		parse_mode='Markdown'
	)
	
	# –æ–∂–∏–¥–∞–Ω–∏–µ –∑–∞–º–µ—Ç–æ–∫
	context.user_data.setdefault('logging_workout', {})['step'] = 'notes'
	return WorkoutLoggingStates.ADD_NOTES

async def process_notes(update: Update, context: ContextTypes.DEFAULT_TYPE):
	"""–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–º–µ—Ç–æ–∫"""
	if update.message and update.message.text:
		context.user_data['exercise_notes'] = update.message.text
	
	# –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
	exercise_data = {
		'name': context.user_data.get('current_exercise', '–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ'),
		'sets': context.user_data.get('sets_reps', ''),
		'reps': context.user_data.get('sets_reps', ''),
		'weight': context.user_data.get('weight', 0),
		'rpe': context.user_data.get('rpe'),
		'notes': context.user_data.get('exercise_notes', '')
	}
	
	# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º workout_data –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
	if 'workout_data' not in context.user_data:
		context.user_data['workout_data'] = {
			'type': '–°–∏–ª–æ–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞',
			'exercises': [],
			'duration': 0,
			'notes': ''
		}
	
	# –î–æ–±–∞–≤–ª—è–µ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ
	context.user_data['workout_data']['exercises'].append(exercise_data)
	
	# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—é
	exercise_name = exercise_data['name']
	sets_reps = exercise_data['sets']
	weight = exercise_data['weight']
	rpe = exercise_data['rpe'] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
	notes = exercise_data['notes'] or '–ë–µ–∑ –∑–∞–º–µ—Ç–æ–∫'
	
	text = f"""
‚úÖ *–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!*

üèãÔ∏è‚Äç‚ôÇÔ∏è **{exercise_name}**
üìä –ü–æ–¥—Ö–æ–¥—ã: {sets_reps}
üí™ –í–µ—Å: {weight} –∫–≥
üòÖ RPE: {rpe}
üìù –ó–∞–º–µ—Ç–∫–∏: {notes}

–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–Ω–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ?
"""
	
	keyboard = [
		[InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ", callback_data="add_another_exercise")],
		[InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É", callback_data="finish_workout")],
		[InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="log_strength")]
	]
	
	reply_markup = InlineKeyboardMarkup(keyboard)
	
	message = await context.bot.send_message(
		chat_id=update.effective_chat.id,
		text=text,
		reply_markup=reply_markup,
		parse_mode='Markdown'
	)
	
	await track_message(context, message.message_id)
	return WorkoutLoggingStates.CONFIRMATION

async def add_new_exercise(update: Update, context: ContextTypes.DEFAULT_TYPE):
	"""–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è"""
	query = update.callback_query
	
	text = """
‚ûï *–ù–æ–≤–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ*

–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:
"""
	
	keyboard = [
		[InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="log_strength")]
	]
	
	reply_markup = InlineKeyboardMarkup(keyboard)
	
	await query.edit_message_text(
		text=text,
		reply_markup=reply_markup,
		parse_mode='Markdown'
	)
	
	# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
	context.user_data['waiting_for_exercise_name'] = True
	return WorkoutLoggingStates.SELECT_EXERCISE

async def process_new_exercise_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
	"""–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è"""
	if not update.message or not update.message.text:
		return WorkoutLoggingStates.SELECT_EXERCISE
	
	exercise_name = update.message.text.strip()
	context.user_data['current_exercise'] = exercise_name
	context.user_data['waiting_for_exercise_name'] = False
	
	# –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –ø–æ–¥—Ö–æ–¥–æ–≤ –∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
	text = f"""
üìä *–í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {exercise_name}*

–í–≤–µ–¥–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—ã –∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
‚Ä¢ 3x10 (3 –ø–æ–¥—Ö–æ–¥–∞ –ø–æ 10 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π)
‚Ä¢ 4x8-12 (4 –ø–æ–¥—Ö–æ–¥–∞ –ø–æ 8-12 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π)
‚Ä¢ 3x5, 1xAMRAP (3 –ø–æ–¥—Ö–æ–¥–∞ –ø–æ 5, 1 –ø–æ–¥—Ö–æ–¥ –¥–æ –æ—Ç–∫–∞–∑–∞)
"""
	
	keyboard = [
		[InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="log_strength")]
	]
	
	reply_markup = InlineKeyboardMarkup(keyboard)
	
	message = await context.bot.send_message(
		chat_id=update.effective_chat.id,
		text=text,
		reply_markup=reply_markup,
		parse_mode='Markdown'
	)
	
	# –æ–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –ø–æ–¥—Ö–æ–¥–æ–≤/–ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
	context.user_data.setdefault('logging_workout', {})['step'] = 'sets_reps'
	await track_message(context, message.message_id)
	return WorkoutLoggingStates.LOG_SETS_REPS

async def finish_workout(update: Update, context: ContextTypes.DEFAULT_TYPE):
	"""–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
	query = update.callback_query
	
	# –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
	text = """
‚è± *–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏*

–°–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –¥–ª–∏–ª–∞—Å—å –≤—Å—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞?

üí° *–ü—Ä–∏–º–µ—Ä—ã:*
‚Ä¢ 45 (45 –º–∏–Ω—É—Ç)
‚Ä¢ 60 (1 —á–∞—Å)
‚Ä¢ 90 (1.5 —á–∞—Å–∞)
"""
	
	keyboard = [
		[InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_exercise")]
	]
	
	reply_markup = InlineKeyboardMarkup(keyboard)
	
	await query.edit_message_text(
		text=text,
		reply_markup=reply_markup,
		parse_mode='Markdown'
	)
	
	# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
	context.user_data.setdefault('logging_workout', {})['step'] = 'workout_duration'
	return WorkoutLoggingStates.LOG_DURATION

# --- –ö–∞—Ä–¥–∏–æ ---
async def start_cardio_logging(update: Update, context: ContextTypes.DEFAULT_TYPE):
	"""–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤–Ω–µ—Å–µ–Ω–∏—è –∫–∞—Ä–¥–∏–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
	await cleanup_previous_messages(update, context)
	
	text = """
üèÉ‚Äç‚ôÇÔ∏è *–í–Ω–µ—Å–µ–Ω–∏–µ –∫–∞—Ä–¥–∏–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏*

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–∞—Ä–¥–∏–æ:
"""
	
	keyboard = [
		[InlineKeyboardButton("üèÉ‚Äç‚ôÇÔ∏è –ë–µ–≥", callback_data="cardio_run"),
		 InlineKeyboardButton("üö¥‚Äç‚ôÇÔ∏è –í–µ–ª–æ—Å–∏–ø–µ–¥", callback_data="cardio_bike")],
		[InlineKeyboardButton("üèä‚Äç‚ôÇÔ∏è –ü–ª–∞–≤–∞–Ω–∏–µ", callback_data="cardio_swim"),
		 InlineKeyboardButton("üèÉ‚Äç‚ôÇÔ∏è –•–æ–¥—å–±–∞", callback_data="cardio_walk")],
		[InlineKeyboardButton("üéØ –î—Ä—É–≥–æ–µ", callback_data="cardio_other"),
		 InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="log_workout")]
	]
	
	reply_markup = InlineKeyboardMarkup(keyboard)
	
	message = await context.bot.send_message(
		chat_id=update.effective_chat.id,
		text=text,
		reply_markup=reply_markup,
		parse_mode='Markdown'
	)
	
	await track_message(context, message.message_id)
	return WorkoutLoggingStates.LOG_DURATION

async def process_cardio_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
	"""–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∫–∞—Ä–¥–∏–æ"""
	query = update.callback_query
	cardio_type = query.data
	
	# –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º callback_data –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
	cardio_types = {
		"cardio_run": "–ë–µ–≥",
		"cardio_bike": "–í–µ–ª–æ—Å–∏–ø–µ–¥",
		"cardio_swim": "–ü–ª–∞–≤–∞–Ω–∏–µ",
		"cardio_walk": "–•–æ–¥—å–±–∞",
		"cardio_other": "–î—Ä—É–≥–æ–µ"
	}
	
	context.user_data['cardio_type'] = cardio_types.get(cardio_type, "–ö–∞—Ä–¥–∏–æ")
	
	text = f"‚è± *–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å {context.user_data['cardio_type']} –≤ –º–∏–Ω—É—Ç–∞—Ö:*"
	
	keyboard = [
		[InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="log_cardio")]
	]
	
	reply_markup = InlineKeyboardMarkup(keyboard)
	
	await query.edit_message_text(
		text=text,
		reply_markup=reply_markup,
		parse_mode='Markdown'
	)
	
	# –æ–∂–∏–¥–∞–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
	context.user_data['awaiting_cardio_duration'] = True
	context.user_data.setdefault('logging_workout', {})['step'] = 'duration'
	return WorkoutLoggingStates.LOG_DURATION

async def process_cardio_duration(update: Update, context: ContextTypes.DEFAULT_TYPE):
	"""–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–∞—Ä–¥–∏–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
	from db import repo
	from db.database import session_scope
	
	try:
		duration = int(float(update.message.text))
		if duration <= 0 or duration > 600:
			raise ValueError
	except Exception:
		await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –º–∏–Ω—É—Ç–∞—Ö, –Ω–∞–ø—Ä–∏–º–µ—Ä: 30")
		return WorkoutLoggingStates.LOG_DURATION
	
	context.user_data['awaiting_cardio_duration'] = False
	
	# –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
	user_id_str = str(update.effective_user.id)
	with session_scope() as s:
		user = repo.get_or_create_user(s, user_id_str, update.effective_user.username, update.effective_user.first_name, update.effective_user.last_name)
		workout = repo.create_completed_workout(
			session=s,
			user_id=user.id,
			plan_id=None,
			workout_type=context.user_data.get('cardio_type', '–ö–∞—Ä–¥–∏–æ'),
			duration=duration,
			notes=None,
		)
		repo.add_loyalty_points(s, user.id, 10)
	
	text = f"""
‚úÖ *–ö–∞—Ä–¥–∏–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!*

–¢–∏–ø: {context.user_data.get('cardio_type', '–ö–∞—Ä–¥–∏–æ')}
–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration} –º–∏–Ω

+10 –±–∞–ª–ª–æ–≤ –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å üéÅ
"""
	
	keyboard = [
		[InlineKeyboardButton("‚Ü©Ô∏è –ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º", callback_data="menu_workouts")],
		[InlineKeyboardButton("üè† –í –º–µ–Ω—é", callback_data="menu_root")]
	]
	
	reply_markup = InlineKeyboardMarkup(keyboard)
	
	message = await context.bot.send_message(
		chat_id=update.effective_chat.id,
		text=text,
		reply_markup=reply_markup,
		parse_mode='Markdown'
	)
	await track_message(context, message.message_id)
	return WorkoutLoggingStates.CONFIRMATION

async def process_workout_duration(update: Update, context: ContextTypes.DEFAULT_TYPE):
	"""–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ"""
	try:
		duration = int(float(update.message.text))
		if duration <= 0 or duration > 600:
			raise ValueError
	except Exception:
		await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –º–∏–Ω—É—Ç–∞—Ö, –Ω–∞–ø—Ä–∏–º–µ—Ä: 45")
		return WorkoutLoggingStates.LOG_DURATION
	
	# –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ workout_data
	context.user_data.setdefault('workout_data', {})['duration'] = duration
	
	# –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
	return await save_completed_workout(update, context)

async def save_completed_workout(update: Update, context: ContextTypes.DEFAULT_TYPE):
	"""–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
	from db import repo
	from db.database import session_scope
	from datetime import datetime
	
	user_id_str = str(update.effective_user.id)
	workout_data = context.user_data.get('workout_data', {})
	
	# –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –≤ –±–∞–∑—É
	with session_scope() as s:
		user = repo.get_or_create_user(s, user_id_str, update.effective_user.username, update.effective_user.first_name, update.effective_user.last_name)
		
		workout = repo.create_completed_workout(
			session=s,
			user_id=user.id,
			plan_id=workout_data.get('plan_id'),
			workout_type=workout_data.get('type'),
			duration=workout_data.get('duration'),
			notes=workout_data.get('notes')
		)
		
		# –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
		for exercise in workout_data.get('exercises', []):
			repo.add_completed_exercise(
				session=s,
				workout_id=workout.id,
				exercise_name=exercise['name'],
				sets=exercise['sets'],
				reps=exercise['reps'],
				weight=exercise['weight'],
				rpe=exercise.get('rpe'),
				notes=exercise.get('notes')
			)
		
		# –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π –æ–±—ä–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
		repo.update_workout_volume(s, workout.id)
		
		# –î–æ–±–∞–≤–ª—è–µ–º –±–∞–ª–ª—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏
		repo.add_loyalty_points(s, user.id, 10)
	
	# –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
	context.user_data.pop('workout_data', None)
	context.user_data.pop('current_exercise', None)
	context.user_data.pop('logging_workout', None)
	
	return await show_workout_summary(update, context, workout)

async def show_workout_summary(update: Update, context: ContextTypes.DEFAULT_TYPE, workout):
	"""–ü–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–¥–∫—É –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ"""
	text = f"""
‚úÖ *–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!*

üèãÔ∏è‚Äç‚ôÇÔ∏è *–¢–∏–ø:* {workout.workout_type}
‚è± *–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:* {workout.duration} –º–∏–Ω
üìä *–û–±—â–∏–π –æ–±—ä–µ–º:* {workout.total_volume or 0} –∫–≥
‚≠ê *–û—Ü–µ–Ω–∫–∞:* {workout.rating or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}/5

*–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! üí™*
"""
	
	keyboard = [
		[InlineKeyboardButton("üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data="view_stats")],
		[InlineKeyboardButton("üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â—É—é", callback_data="schedule_next")],
		[InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu_root")]
	]
	
	reply_markup = InlineKeyboardMarkup(keyboard)
	
	if update.callback_query:
		await update.callback_query.edit_message_text(
			text=text,
			reply_markup=reply_markup,
			parse_mode='Markdown'
		)
	else:
		message = await context.bot.send_message(
			chat_id=update.effective_chat.id,
			text=text,
			reply_markup=reply_markup,
			parse_mode='Markdown'
		)
		await track_message(context, message.message_id)
	
	return WorkoutLoggingStates.CONFIRMATION

async def add_another_exercise(update: Update, context: ContextTypes.DEFAULT_TYPE):
	"""–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –µ—â–µ –æ–¥–Ω–æ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ"""
	query = update.callback_query
	
	# –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è, –Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º workout_data
	context.user_data.pop('current_exercise', None)
	context.user_data.pop('sets_reps', None)
	context.user_data.pop('weight', None)
	context.user_data.pop('rpe', None)
	context.user_data.pop('exercise_notes', None)
	
	# –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
	text = "üèãÔ∏è‚Äç‚ôÇÔ∏è *–í–Ω–µ—Å–µ–Ω–∏–µ —Å–∏–ª–æ–≤–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ:"
	
	user_exercises = await get_recent_exercises(update.effective_user.id)
	
	keyboard = []
	for exercise in user_exercises[:5]:
		keyboard.append([InlineKeyboardButton(exercise, callback_data=f"select_exercise:{exercise}")])
	
	keyboard.extend([
		[InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ", callback_data="add_new_exercise")],
		[InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É", callback_data="finish_workout")]
	])
	
	reply_markup = InlineKeyboardMarkup(keyboard)
	
	await query.edit_message_text(
		text=text,
		reply_markup=reply_markup,
		parse_mode='Markdown'
	)
	
	return WorkoutLoggingStates.SELECT_EXERCISE

async def handle_workout_history(update: Update, context: ContextTypes.DEFAULT_TYPE):
	"""–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫"""
	await cleanup_previous_messages(update, context)
	
	from db import repo
	from db.database import session_scope
	
	user_id_str = str(update.effective_user.id)
	
	with session_scope() as s:
		user = repo.get_or_create_user(s, user_id_str, update.effective_user.username, update.effective_user.first_name, update.effective_user.last_name)
		workouts = repo.get_user_workout_history(s, user.id, limit=10)
	
	if not workouts:
		text = "üìä *–ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫*\n\n–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫."
	else:
		text = "üìä *–ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫*\n\n"
		for i, workout in enumerate(workouts):
			# –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏–∑ —Å—Ç—Ä–æ–∫–∏ ISO
			from datetime import datetime
			try:
				workout_date = datetime.fromisoformat(workout.workout_date)
				date_str = workout_date.strftime('%d.%m.%Y')
			except:
				date_str = workout.workout_date
			
			text += f"*{i+1}. {workout.workout_type}* - {date_str}\n"
			text += f"   ‚è± {workout.duration} –º–∏–Ω, üìä {workout.total_volume or 0} –∫–≥\n\n"
	
	keyboard = [
		[InlineKeyboardButton("üìà –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞", callback_data="progress_chart")],
		[InlineKeyboardButton("üìã –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="detailed_stats")],
		[InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º", callback_data="menu_workouts")]
	]
	
	reply_markup = InlineKeyboardMarkup(keyboard)
	
	message = await context.bot.send_message(
		chat_id=update.effective_chat.id,
		text=text,
		reply_markup=reply_markup,
		parse_mode='Markdown'
	)
	
	await track_message(context, message.message_id)

async def handle_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE):
	"""–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤–Ω–µ—Å–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
	query = update.callback_query
	data = query.data
	
	if data == "add_another_exercise":
		return await add_another_exercise(update, context)
	elif data == "finish_workout":
		return await finish_workout(update, context)
	
	return WorkoutLoggingStates.CONFIRMATION

async def cancel_logging(update: Update, context: ContextTypes.DEFAULT_TYPE):
	"""–û—Ç–º–µ–Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤–Ω–µ—Å–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
	query = update.callback_query
	
	# –û—á–∏—â–∞–µ–º –≤—Å–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
	context.user_data.pop('workout_data', None)
	context.user_data.pop('current_exercise', None)
	context.user_data.pop('logging_workout', None)
	context.user_data.pop('sets_reps', None)
	context.user_data.pop('weight', None)
	context.user_data.pop('rpe', None)
	context.user_data.pop('exercise_notes', None)
	context.user_data.pop('waiting_for_exercise_name', None)
	context.user_data.pop('awaiting_cardio_duration', None)
	
	text = "‚ùå *–í–Ω–µ—Å–µ–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ*\n\n–í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã."
	
	keyboard = [
		[InlineKeyboardButton("üèãÔ∏è –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="log_workout")],
		[InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu_root")]
	]
	
	reply_markup = InlineKeyboardMarkup(keyboard)
	
	await query.edit_message_text(
		text=text,
		reply_markup=reply_markup,
		parse_mode='Markdown'
	)
	
	return ConversationHandler.END

async def handle_progress_chart(update: Update, context: ContextTypes.DEFAULT_TYPE):
	"""–ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
	await cleanup_previous_messages(update, context)
	
	text = """
üìà *–ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞*

–§—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.

–í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç:
‚Ä¢ –ì—Ä–∞—Ñ–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–µ—Å–∞ –ø–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º
‚Ä¢ –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –æ–±—ä–µ–º—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
‚Ä¢ –¢—Ä–µ–Ω–¥—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
"""
	
	keyboard = [
		[InlineKeyboardButton("‚Ü©Ô∏è –ö –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫", callback_data="workout_history")],
		[InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu_root")]
	]
	
	reply_markup = InlineKeyboardMarkup(keyboard)
	
	message = await context.bot.send_message(
		chat_id=update.effective_chat.id,
		text=text,
		reply_markup=reply_markup,
		parse_mode='Markdown'
	)
	
	await track_message(context, message.message_id)

async def handle_detailed_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
	"""–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
	await cleanup_previous_messages(update, context)
	
	from db import repo
	from db.database import session_scope
	
	user_id_str = str(update.effective_user.id)
	
	with session_scope() as s:
		user = repo.get_or_create_user(s, user_id_str, update.effective_user.username, update.effective_user.first_name, update.effective_user.last_name)
		workouts = repo.get_user_workout_history(s, user.id, limit=30)  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 30 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
	
	if not workouts:
		text = "üìã *–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*\n\n–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞."
	else:
		# –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
		total_workouts = len(workouts)
		total_duration = sum(w.duration or 0 for w in workouts)
		total_volume = sum(w.total_volume or 0 for w in workouts)
		avg_duration = total_duration / total_workouts if total_workouts > 0 else 0
		avg_volume = total_volume / total_workouts if total_workouts > 0 else 0
		
		# –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
		workout_types = {}
		for w in workouts:
			workout_type = w.workout_type or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
			if workout_type not in workout_types:
				workout_types[workout_type] = 0
			workout_types[workout_type] += 1
		
		text = f"""
üìã *–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*

üìä *–û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:*
‚Ä¢ –í—Å–µ–≥–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {total_workouts}
‚Ä¢ –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_duration} –º–∏–Ω
‚Ä¢ –û–±—â–∏–π –æ–±—ä–µ–º: {total_volume:.1f} –∫–≥
‚Ä¢ –°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {avg_duration:.1f} –º–∏–Ω
‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –æ–±—ä–µ–º: {avg_volume:.1f} –∫–≥

üèãÔ∏è‚Äç‚ôÇÔ∏è *–ü–æ —Ç–∏–ø–∞–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:*
"""
		for workout_type, count in workout_types.items():
			text += f"‚Ä¢ {workout_type}: {count} —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫\n"
		
		text += "\nüí° *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:*\n"
		if total_workouts < 5:
			text += "‚Ä¢ –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ\n"
		elif avg_duration < 30:
			text += "‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–≤–µ–ª–∏—á–∏—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫\n"
		else:
			text += "‚Ä¢ –û—Ç–ª–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã! –î–µ—Ä–∂–∏—Ç–µ —Ç–µ–º–ø\n"
	
	keyboard = [
		[InlineKeyboardButton("üìà –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞", callback_data="progress_chart")],
		[InlineKeyboardButton("‚Ü©Ô∏è –ö –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫", callback_data="workout_history")],
		[InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu_root")]
	]
	
	reply_markup = InlineKeyboardMarkup(keyboard)
	
	message = await context.bot.send_message(
		chat_id=update.effective_chat.id,
		text=text,
		reply_markup=reply_markup,
		parse_mode='Markdown'
	)
	
	await track_message(context, message.message_id)