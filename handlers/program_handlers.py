from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
from db.repo import (
    get_all_training_programs, get_training_program_by_id, get_program_workouts, 
    get_user_active_program, start_user_program, get_user_program_progress, 
    complete_program_workout, get_training_programs_by_goal
)
from db.database import SessionLocal
from db.models import UserProgram
import json

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
class ProgramStates:
    SELECT_PROGRAM = 1
    VIEW_PROGRAM = 2
    START_PROGRAM = 3
    VIEW_WORKOUT = 4
    FILTER_PROGRAMS = 5

async def handle_training_programs(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ì–æ—Ç–æ–≤—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã'"""
    await cleanup_previous_messages(update, context)
    
    text = """
üèÜ *–ì–æ—Ç–æ–≤—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã*

–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤–∞—à–∏–º —Ü–µ–ª—è–º:

–ö–∞–∂–¥–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –≤–∫–ª—é—á–∞–µ—Ç:
‚Ä¢ üìÖ –ü–æ–ª–Ω—ã–π –ø–ª–∞–Ω –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–µ–¥–µ–ª—å
‚Ä¢ üèãÔ∏è‚Äç‚ôÇÔ∏è –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
‚Ä¢ üìä –ü—Ä–æ–≥—Ä–µ—Å—Å–∏—é –Ω–∞–≥—Ä—É–∑–æ–∫
‚Ä¢ üéØ –ß–µ—Ç–∫–∏–µ —Ü–µ–ª–∏ –∏ –º–µ—Ç—Ä–∏–∫–∏
"""
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã
    programs = await get_available_programs()
    
    keyboard = []
    for program in programs:
        keyboard.append([InlineKeyboardButton(
            f"{program['name']} - {program['goal']}", 
            callback_data=f"program_{program['id']}"
        )])
    
    keyboard.extend([
        [InlineKeyboardButton("üîç –§–∏–ª—å—Ç—Ä –ø–æ —Ü–µ–ª–∏", callback_data="programs_filter")],
        [InlineKeyboardButton("üìä –ú–æ–∏ —Ç–µ–∫—É—â–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã", callback_data="my_programs")],
        [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º", callback_data="workouts")]
    ])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    message = await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    
    await track_message(context, message.message_id)

async def show_program_details(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    query = update.callback_query
    program_id = int(query.data.split("_")[1])
    
    program = await get_program_details(program_id)
    
    text = f"""
üèÜ *{program['name']}*

üéØ *–¶–µ–ª—å:* {program['goal']}
üìä *–£—Ä–æ–≤–µ–Ω—å:* {program['level']}
‚è± *–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:* {program['duration_weeks']} –Ω–µ–¥–µ–ª—å
üìÖ *–¢—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ –Ω–µ–¥–µ–ª—é:* {program['days_per_week']}
üèãÔ∏è *–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ:* {program['equipment']}

üìù *–û–ø–∏—Å–∞–Ω–∏–µ:*
{program['description']}

*–ß—Ç–æ –≤–∫–ª—é—á–µ–Ω–æ:*
‚Ä¢ –ü–æ–ª–Ω—ã–π –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –Ω–∞ {program['duration_weeks']} –Ω–µ–¥–µ–ª—å
‚Ä¢ –î–µ—Ç–∞–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
‚Ä¢ –ü—Ä–æ–≥—Ä–µ—Å—Å–∏—è –Ω–∞–≥—Ä—É–∑–æ–∫
‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–∏—Ç–∞–Ω–∏—é
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ –º–æ—Ç–∏–≤–∞—Ü–∏—è
"""
    
    keyboard = [
        [InlineKeyboardButton("‚úÖ –ù–∞—á–∞—Ç—å —ç—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—É", callback_data=f"start_program_{program_id}")],
        [InlineKeyboardButton("üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–ª–∞–Ω", callback_data=f"view_program_plan_{program_id}")],
        [InlineKeyboardButton("üí¨ –û—Ç–∑—ã–≤—ã", callback_data=f"program_reviews_{program_id}")],
        [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ–≥—Ä–∞–º–º–∞–º", callback_data="training_programs")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        text=text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def show_programs_filter(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä –ø—Ä–æ–≥—Ä–∞–º–º –ø–æ —Ü–µ–ª—è–º"""
    query = update.callback_query
    
    text = """
üîç *–§–∏–ª—å—Ç—Ä –ø—Ä–æ–≥—Ä–∞–º–º –ø–æ —Ü–µ–ª—è–º*

–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã:
"""
    
    keyboard = [
        [InlineKeyboardButton("üí™ –ù–∞–±–æ—Ä –º—ã—à–µ—á–Ω–æ–π –º–∞—Å—Å—ã", callback_data="filter_muscle_gain")],
        [InlineKeyboardButton("üî• –ü–æ—Ö—É–¥–µ–Ω–∏–µ", callback_data="filter_fat_loss")],
        [InlineKeyboardButton("üí• –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å–∏–ª—ã", callback_data="filter_strength")],
        [InlineKeyboardButton("üèÉ‚Äç‚ôÇÔ∏è –í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å", callback_data="filter_endurance")],
        [InlineKeyboardButton("üßò‚Äç‚ôÄÔ∏è –¢–æ–Ω—É—Å –∏ –≥–∏–±–∫–æ—Å—Ç—å", callback_data="filter_mobility")],
        [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="training_programs")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        text=text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def show_filtered_programs(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—ã –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ü–µ–ª–∏"""
    query = update.callback_query
    goal = query.data.split("_")[1]
    
    # –ö–∞—Ä—Ç–∞ —Ü–µ–ª–µ–π
    goal_map = {
        "muscle": "muscle_gain",
        "fat": "fat_loss", 
        "strength": "strength",
        "endurance": "endurance",
        "mobility": "mobility"
    }
    
    goal_name_map = {
        "muscle": "–ù–∞–±–æ—Ä –º—ã—à–µ—á–Ω–æ–π –º–∞—Å—Å—ã",
        "fat": "–ü–æ—Ö—É–¥–µ–Ω–∏–µ",
        "strength": "–£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å–∏–ª—ã", 
        "endurance": "–í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å",
        "mobility": "–¢–æ–Ω—É—Å –∏ –≥–∏–±–∫–æ—Å—Ç—å"
    }
    
    mapped_goal = goal_map.get(goal, goal)
    goal_display = goal_name_map.get(goal, goal)
    
    session = SessionLocal()
    programs = get_training_programs_by_goal(session, mapped_goal)
    session.close()
    
    text = f"üéØ *–ü—Ä–æ–≥—Ä–∞–º–º—ã –¥–ª—è —Ü–µ–ª–∏: {goal_display}*\n\n"
    
    if not programs:
        text += "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–≥—Ä–∞–º–º—ã –¥–ª—è —ç—Ç–æ–π —Ü–µ–ª–∏ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã."
        keyboard = [[InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="programs_filter")]]
    else:
        text += "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É:\n\n"
        keyboard = []
        
        for program in programs:
            keyboard.append([InlineKeyboardButton(
                f"üèãÔ∏è {program.name} ({program.level})",
                callback_data=f"program_{program.id}"
            )])
        
        keyboard.extend([
            [InlineKeyboardButton("üîç –î—Ä—É–≥–∏–µ —Ü–µ–ª–∏", callback_data="programs_filter")],
            [InlineKeyboardButton("‚Ü©Ô∏è –í—Å–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã", callback_data="training_programs")]
        ])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        text=text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def show_my_programs(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    query = update.callback_query
    
    session = SessionLocal()
    user_program = get_user_active_program(session, update.effective_user.id)
    session.close()
    
    if not user_program:
        text = """
üìä *–ú–æ–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã*

–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º.

–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –ø–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –ø–ª–∞–Ω—É!
"""
        keyboard = [
            [InlineKeyboardButton("üìö –í—ã–±—Ä–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É", callback_data="training_programs")],
            [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="workouts")]
        ]
    else:
        session = SessionLocal()
        progress = get_user_program_progress(session, user_program.id)
        session.close()
        
        text = f"""
üìä *–ú–æ—è —Ç–µ–∫—É—â–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞*

üèãÔ∏è *{user_program.program.name}*
üìÖ *–ù–µ–¥–µ–ª—è:* {progress['current_week']} –∏–∑ {progress['total_weeks']}
üìÖ *–î–µ–Ω—å:* {progress['current_day']} –∏–∑ {progress['days_per_week']}
‚úÖ *–ü—Ä–æ–≥—Ä–µ—Å—Å:* {progress['progress_percent']:.1f}%
üìà *–í—ã–ø–æ–ª–Ω–µ–Ω–æ:* {progress['completed_workouts']}/{progress['total_workouts']} —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫

"""
        
        if progress['is_completed']:
            text += "üéâ *–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!*"
            keyboard = [
                [InlineKeyboardButton("üìö –í—ã–±—Ä–∞—Ç—å –Ω–æ–≤—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É", callback_data="training_programs")],
                [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="program_stats")],
                [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="workouts")]
            ]
        else:
            text += "üí™ *–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏!*"
            keyboard = [
                [InlineKeyboardButton("üìã –¢–µ–∫—É—â–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞", callback_data=f"current_workout:{user_program.program_id}")],
                [InlineKeyboardButton("üìä –î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å", callback_data=f"my_progress:{user_program.program_id}")],
                [InlineKeyboardButton("‚è∏Ô∏è –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É", callback_data=f"pause_program:{user_program.id}")],
                [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="workouts")]
            ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        text=text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def view_program_plan(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–ª–∞–Ω –ø—Ä–æ–≥—Ä–∞–º–º—ã –ø–æ –Ω–µ–¥–µ–ª—è–º"""
    query = update.callback_query
    program_id = int(query.data.split("_")[2])
    
    session = SessionLocal()
    program = get_training_program_by_id(session, program_id)
    workouts = get_program_workouts(session, program_id)
    session.close()
    
    if not program:
        await query.answer("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    text = f"üìã *–ü–ª–∞–Ω –ø—Ä–æ–≥—Ä–∞–º–º—ã '{program.name}'*\n\n"
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –ø–æ –Ω–µ–¥–µ–ª—è–º
    weeks = {}
    for workout in workouts:
        if workout.week_number not in weeks:
            weeks[workout.week_number] = []
        weeks[workout.week_number].append(workout)
    
    for week_num in sorted(weeks.keys()):
        text += f"üìÖ *–ù–µ–¥–µ–ª—è {week_num}*\n"
        week_workouts = sorted(weeks[week_num], key=lambda x: x.day_number)
        
        for workout in week_workouts:
            text += f"  ‚Ä¢ –î–µ–Ω—å {workout.day_number}: {workout.workout_type}"
            if workout.muscle_groups:
                text += f" ({workout.muscle_groups})"
            if workout.duration_minutes:
                text += f" - {workout.duration_minutes} –º–∏–Ω"
            text += "\n"
        text += "\n"
    
    keyboard = [
        [InlineKeyboardButton("‚úÖ –ù–∞—á–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É", callback_data=f"start_program_{program_id}")],
        [InlineKeyboardButton("‚Ü©Ô∏è –ö –ø—Ä–æ–≥—Ä–∞–º–º–µ", callback_data=f"program_{program_id}")],
        [InlineKeyboardButton("‚Ü©Ô∏è –í—Å–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã", callback_data="training_programs")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        text=text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def start_program_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    query = update.callback_query
    program_id = int(query.data.split("_")[2])
    
    session = SessionLocal()
    program = get_training_program_by_id(session, program_id)
    existing_program = get_user_active_program(session, update.effective_user.id)
    session.close()
    
    if not program:
        await query.answer("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    if existing_program:
        text = f"""
‚ö†Ô∏è *–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞*

–¢–µ–∫—É—â–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞: *{existing_program.program.name}*

–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É '{program.name}', –Ω—É–∂–Ω–æ:
‚Ä¢ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ–∫—É—â—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É
‚Ä¢ –ò–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å –µ—ë

–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?
"""
        keyboard = [
            [InlineKeyboardButton("üìä –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç–µ–∫—É—â—É—é", callback_data=f"my_progress:{existing_program.program_id}")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é", callback_data=f"cancel_program:{existing_program.id}")],
            [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data=f"program_{program_id}")]
        ]
    else:
        text = f"""
üöÄ *–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã*

–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –Ω–∞—á–∞—Ç—å:
üèãÔ∏è *{program.name}*
üéØ *–¶–µ–ª—å:* {program.goal}
‚è± *–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:* {program.duration_weeks} –Ω–µ–¥–µ–ª—å
üìÖ *–¢—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ –Ω–µ–¥–µ–ª—é:* {program.days_per_week}

üìã *–ß—Ç–æ —ç—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç:*
‚Ä¢ –í—ã –ø–æ–ª—É—á–∏—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
‚Ä¢ –°–º–æ–∂–µ—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å
‚Ä¢ –ü–æ–ª—É—á–∏—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ç–µ—Ö–Ω–∏–∫–µ
‚Ä¢ –í –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–≤–æ–±–æ–¥–Ω—ã–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º

–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å?
"""
        keyboard = [
            [InlineKeyboardButton("‚úÖ –î–∞, –Ω–∞—á–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É!", callback_data=f"confirm_start_{program_id}")],
            [InlineKeyboardButton("üìã –ï—â—ë —Ä–∞–∑ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–ª–∞–Ω", callback_data=f"view_program_plan_{program_id}")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"program_{program_id}")]
        ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        text=text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def confirm_start_program(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –Ω–∞—á–∞–ª–æ –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    query = update.callback_query
    program_id = int(query.data.split("_")[2])
    
    try:
        session = SessionLocal()
        user_program = start_user_program(session, update.effective_user.id, program_id)
        program = get_training_program_by_id(session, program_id)
        session.commit()
        session.close()
        
        text = f"""
üéâ *–ü—Ä–æ–≥—Ä–∞–º–º–∞ —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∞—Ç–∞!*

üèãÔ∏è *{program.name}*
üìÖ *–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞:* {user_program.start_date.strftime('%d.%m.%Y')}
üìä *–¢–µ–∫—É—â–∏–π —ç—Ç–∞–ø:* –ù–µ–¥–µ–ª—è {user_program.current_week}, –î–µ–Ω—å {user_program.current_day}

üéØ *–í–∞—à–∏ —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:*
1. –ò–∑—É—á–∏—Ç–µ –ø–µ—Ä–≤—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
2. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –µ—ë –≤ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è
3. –û—Ç–º–µ—Ç—å—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤ –±–æ—Ç–µ
4. –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –∫ —Å–ª–µ–¥—É—é—â–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ

–£–¥–∞—á–∏ –≤ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ —Ü–µ–ª–µ–π! üí™
"""
        
        keyboard = [
            [InlineKeyboardButton("üìã –ü–µ—Ä–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞", callback_data=f"current_workout:{program_id}")],
            [InlineKeyboardButton("üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å", callback_data=f"my_progress:{program_id}")],
            [InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            text=text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        
    except ValueError as e:
        await query.answer(f"–û—à–∏–±–∫–∞: {str(e)}")
    except Exception as e:
        await query.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

async def show_current_workout(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    query = update.callback_query
    program_id = int(query.data.split(":")[1])
    
    session = SessionLocal()
    user_program = get_user_active_program(session, update.effective_user.id)
    program = get_training_program_by_id(session, program_id)
    
    if not user_program or user_program.program_id != program_id:
        await query.answer("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        session.close()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
    current_workouts = get_program_workouts(session, program_id, user_program.current_week)
    current_workout = next((w for w in current_workouts if w.day_number == user_program.current_day), None)
    session.close()
    
    if not current_workout:
        text = "‚ùå –¢–µ–∫—É—â–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        keyboard = [[InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data=f"my_progress:{program_id}")]]
    else:
        text = f"""
üìã *–¢–µ–∫—É—â–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞*

üèãÔ∏è *–ü—Ä–æ–≥—Ä–∞–º–º–∞:* {program.name}
üìÖ *–ù–µ–¥–µ–ª—è {user_program.current_week}, –î–µ–Ω—å {user_program.current_day}*
üéØ *–¢–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:* {current_workout.workout_type}
üí™ *–¶–µ–ª–µ–≤—ã–µ –º—ã—à—Ü—ã:* {current_workout.muscle_groups or "–û–±—â–∞—è"}
‚è± *–ü—Ä–∏–º–µ—Ä–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:* {current_workout.duration_minutes or 45} –º–∏–Ω

"""
        
        if current_workout.exercises:
            text += "*üìã –ü–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:*\n"
            for i, exercise in enumerate(current_workout.exercises, 1):
                text += f"{i}. **{exercise.get('name', '–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ')}**\n"
                if exercise.get('sets') and exercise.get('reps'):
                    text += f"   ‚Ä¢ {exercise['sets']} –ø–æ–¥—Ö–æ–¥–æ–≤ x {exercise['reps']} –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π\n"
                if exercise.get('weight'):
                    text += f"   ‚Ä¢ –†–∞–±–æ—á–∏–π –≤–µ—Å: {exercise['weight']} –∫–≥\n"
                if exercise.get('rest'):
                    text += f"   ‚Ä¢ –û—Ç–¥—ã—Ö: {exercise['rest']} —Å–µ–∫\n"
                if exercise.get('notes'):
                    text += f"   ‚Ä¢ –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: {exercise['notes']}\n"
                text += "\n"
        
        text += "üí° *–°–æ–≤–µ—Ç:* –í—ã–ø–æ–ª–Ω–∏—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –∏ –æ—Ç–º–µ—Ç—å—Ç–µ –µ—ë –∫–∞–∫ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—É—é –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–π!"
        
        keyboard = [
            [InlineKeyboardButton("‚úÖ –í—ã–ø–æ–ª–Ω–∏–ª —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É", callback_data=f"complete_workout:{program_id}")],
            [InlineKeyboardButton("üìù –í–Ω–µ—Å—Ç–∏ –¥–µ—Ç–∞–ª–∏", callback_data=f"log_program_workout:{program_id}")],
            [InlineKeyboardButton("üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å", callback_data=f"my_progress:{program_id}")],
            [InlineKeyboardButton("‚Ü©Ô∏è –ö –ø—Ä–æ–≥—Ä–∞–º–º–µ", callback_data=f"program_{program_id}")]
        ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        text=text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def show_program_progress(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–µ"""
    query = update.callback_query
    program_id = int(query.data.split(":")[1])
    
    session = SessionLocal()
    user_program = get_user_active_program(session, update.effective_user.id)
    
    if not user_program or user_program.program_id != program_id:
        await query.answer("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        session.close()
        return
    
    progress = get_user_program_progress(session, user_program.id)
    program = get_training_program_by_id(session, program_id)
    session.close()
    
    # –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
    progress_percent = progress['progress_percent']
    filled_blocks = int(progress_percent / 10)
    progress_bar = "‚ñà" * filled_blocks + "‚ñë" * (10 - filled_blocks)
    
    text = f"""
üìä *–î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å*

üèãÔ∏è *–ü—Ä–æ–≥—Ä–∞–º–º–∞:* {program.name}
üìÖ *–ù–∞—á–∞—Ç–∞:* {user_program.start_date.strftime('%d.%m.%Y')}

üìà *–û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å:*
{progress_bar} {progress_percent:.1f}%

üìã *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*
‚Ä¢ –¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è: {progress['current_week']} –∏–∑ {progress['total_weeks']}
‚Ä¢ –¢–µ–∫—É—â–∏–π –¥–µ–Ω—å: {progress['current_day']} –∏–∑ {progress['days_per_week']}
‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {progress['completed_workouts']} –∏–∑ {progress['total_workouts']}
‚Ä¢ –û—Å—Ç–∞–ª–æ—Å—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {progress['total_workouts'] - progress['completed_workouts']}

"""
    
    if progress['is_completed']:
        text += "üéä *–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≤–µ—Ä—à–µ–Ω–∞!*"
        keyboard = [
            [InlineKeyboardButton("üìö –ù–æ–≤–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞", callback_data="training_programs")],
            [InlineKeyboardButton("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="program_stats")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
    else:
        days_left = (progress['total_weeks'] - progress['current_week'] + 1) * progress['days_per_week'] - progress['current_day'] + 1
        text += f"üéØ *–û—Å—Ç–∞–ª–æ—Å—å –ø—Ä–∏–º–µ—Ä–Ω–æ {days_left} –¥–Ω–µ–π –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è*"
        
        keyboard = [
            [InlineKeyboardButton("üìã –¢–µ–∫—É—â–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞", callback_data=f"current_workout:{program_id}")],
            [InlineKeyboardButton("üìÖ –ü–ª–∞–Ω –Ω–∞ –Ω–µ–¥–µ–ª—é", callback_data=f"week_plan:{program_id}:{progress['current_week']}")],
            [InlineKeyboardButton("‚è∏Ô∏è –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data=f"pause_program:{user_program.id}")],
            [InlineKeyboardButton("‚Ü©Ô∏è –ö –ø—Ä–æ–≥—Ä–∞–º–º–µ", callback_data=f"program_{program_id}")]
        ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        text=text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def complete_program_workout_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º–Ω—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é"""
    query = update.callback_query
    program_id = int(query.data.split(":")[1])
    
    session = SessionLocal()
    user_program = get_user_active_program(session, update.effective_user.id)
    program = get_training_program_by_id(session, program_id)
    
    if not user_program or user_program.program_id != program_id:
        await query.answer("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        session.close()
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
    current_week = user_program.current_week
    current_day = user_program.current_day
    
    # –û—Ç–º–µ—á–∞–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
    complete_program_workout(session, user_program.id, current_week, current_day)
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    user_program = session.get(UserProgram, user_program.id)
    session.commit()
    session.close()
    
    text = f"""
‚úÖ *–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!*

üéâ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏:
üìÖ *–ù–µ–¥–µ–ª—è {current_week}, –î–µ–Ω—å {current_day}*
üèãÔ∏è *–ü—Ä–æ–≥—Ä–∞–º–º–∞:* {program.name}

"""
    
    if user_program.is_completed:
        text += """
üéä *–ü–û–ó–î–†–ê–í–õ–Ø–ï–ú!*
–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –≤—Å—é –ø—Ä–æ–≥—Ä–∞–º–º—É!

üèÜ *–í–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:*
‚Ä¢ –ü—Ä–æ—à–ª–∏ –ø–æ–ª–Ω—ã–π –∫—É—Ä—Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
‚Ä¢ –†–∞–∑–≤–∏–ª–∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É –∏ –ø–æ—Å—Ç–æ—è–Ω—Å—Ç–≤–æ
‚Ä¢ –î–æ—Å—Ç–∏–≥–ª–∏ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π —Ü–µ–ª–∏

–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –Ω–æ–≤—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.
"""
        keyboard = [
            [InlineKeyboardButton("üéâ –ú–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è", callback_data="program_achievements")],
            [InlineKeyboardButton("üìö –ù–æ–≤–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞", callback_data="training_programs")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
    else:
        text += f"""
üìä *–°–ª–µ–¥—É—é—â–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞:*
–ù–µ–¥–µ–ª—è {user_program.current_week}, –î–µ–Ω—å {user_program.current_day}

–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! üí™
"""
        keyboard = [
            [InlineKeyboardButton("üìã –°–ª–µ–¥—É—é—â–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞", callback_data=f"current_workout:{program_id}")],
            [InlineKeyboardButton("üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å", callback_data=f"my_progress:{program_id}")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        text=text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async def get_available_programs():
    """–ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    session = SessionLocal()
    programs = get_all_training_programs(session)
    session.close()
    
    return [
        {
            'id': p.id,
            'name': p.name,
            'goal': p.goal,
            'level': p.level,
            'duration_weeks': p.duration_weeks,
            'days_per_week': p.days_per_week,
            'equipment': p.equipment,
            'description': p.description
        }
        for p in programs
    ]

async def get_program_details(program_id: int):
    """–ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    session = SessionLocal()
    program = get_training_program_by_id(session, program_id)
    session.close()
    
    if not program:
        return None
    
    return {
        'id': program.id,
        'name': program.name,
        'goal': program.goal,
        'level': program.level,
        'duration_weeks': program.duration_weeks,
        'days_per_week': program.days_per_week,
        'equipment': program.equipment,
        'description': program.description
    }

# –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π –æ—á–∏—Å—Ç–∫–∏ –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
async def cleanup_previous_messages(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    pass

async def track_message(context: ContextTypes.DEFAULT_TYPE, message_id: int):
    """–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    pass