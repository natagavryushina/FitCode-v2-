from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from typing import Optional

async def cleanup_previous_messages(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    # –û—á–∏—Å—Ç–∫–∞ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –º–æ–¥—É–ª–µ
    pass

async def track_message(context: ContextTypes.DEFAULT_TYPE, message_id: int):
    """–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—á–∏—Å—Ç–∫–∏"""
    # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –º–æ–¥—É–ª–µ
    pass

async def handle_log_workout(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–í–Ω–µ—Å—Ç–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É'"""
    await cleanup_previous_messages(update, context)
    
    text = """
‚úÖ *–í–Ω–µ—Å–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏*

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏, –∫–æ—Ç–æ—Ä—É—é –≤—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏:
"""
    
    keyboard = [
        [InlineKeyboardButton("üèãÔ∏è‚Äç‚ôÇÔ∏è –°–∏–ª–æ–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞", callback_data="log_strength")],
        [InlineKeyboardButton("üèÉ‚Äç‚ôÇÔ∏è –ö–∞—Ä–¥–∏–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞", callback_data="log_cardio")],
        [InlineKeyboardButton("üßò‚Äç‚ôÇÔ∏è –ô–æ–≥–∞/–†–∞—Å—Ç—è–∂–∫–∞", callback_data="log_yoga")],
        [InlineKeyboardButton("‚ö°Ô∏è –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞", callback_data="log_functional")],
        [InlineKeyboardButton("üìÖ –ò–∑ –ø–ª–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫", callback_data="log_from_plan")],
        [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º", callback_data="workouts")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    message = await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    
    await track_message(context, message.message_id)


async def handle_log_strength_workout(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–ª–æ–≤–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
    await cleanup_previous_messages(update, context)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –æ —Å–∏–ª–æ–≤–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ
    context.user_data['logging_workout'] = {
        'type': 'strength',
        'step': 'duration',
        'data': {}
    }
    
    text = """
üèãÔ∏è‚Äç‚ôÇÔ∏è *–°–∏–ª–æ–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞*

–°–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –¥–ª–∏–ª–∞—Å—å –≤–∞—à–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞?

üí° *–ü—Ä–∏–º–µ—Ä—ã:*
‚Ä¢ 45 (45 –º–∏–Ω—É—Ç)
‚Ä¢ 60 (1 —á–∞—Å)
‚Ä¢ 90 (1.5 —á–∞—Å–∞)
"""
    
    keyboard = [
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="log_workout")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    message = await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    
    await track_message(context, message.message_id)


async def handle_log_cardio_workout(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–∞—Ä–¥–∏–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
    await cleanup_previous_messages(update, context)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –æ –∫–∞—Ä–¥–∏–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ
    context.user_data['logging_workout'] = {
        'type': 'cardio',
        'step': 'duration',
        'data': {}
    }
    
    text = """
üèÉ‚Äç‚ôÇÔ∏è *–ö–∞—Ä–¥–∏–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞*

–°–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –¥–ª–∏–ª–∞—Å—å –≤–∞—à–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞?

üí° *–ü—Ä–∏–º–µ—Ä—ã:*
‚Ä¢ 30 (30 –º–∏–Ω—É—Ç)
‚Ä¢ 45 (45 –º–∏–Ω—É—Ç)
‚Ä¢ 60 (1 —á–∞—Å)
"""
    
    keyboard = [
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="log_workout")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    message = await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    
    await track_message(context, message.message_id)


async def handle_log_yoga_workout(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –π–æ–≥–∏/—Ä–∞—Å—Ç—è–∂–∫–∏"""
    await cleanup_previous_messages(update, context)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –æ –π–æ–≥–µ
    context.user_data['logging_workout'] = {
        'type': 'yoga',
        'step': 'duration',
        'data': {}
    }
    
    text = """
üßò‚Äç‚ôÇÔ∏è *–ô–æ–≥–∞/–†–∞—Å—Ç—è–∂–∫–∞*

–°–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –¥–ª–∏–ª–∞—Å—å –≤–∞—à–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞?

üí° *–ü—Ä–∏–º–µ—Ä—ã:*
‚Ä¢ 20 (20 –º–∏–Ω—É—Ç)
‚Ä¢ 45 (45 –º–∏–Ω—É—Ç)
‚Ä¢ 60 (1 —á–∞—Å)
"""
    
    keyboard = [
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="log_workout")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    message = await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    
    await track_message(context, message.message_id)


async def handle_log_functional_workout(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
    await cleanup_previous_messages(update, context)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ
    context.user_data['logging_workout'] = {
        'type': 'functional',
        'step': 'duration',
        'data': {}
    }
    
    text = """
‚ö°Ô∏è *–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞*

–°–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –¥–ª–∏–ª–∞—Å—å –≤–∞—à–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞?

üí° *–ü—Ä–∏–º–µ—Ä—ã:*
‚Ä¢ 30 (30 –º–∏–Ω—É—Ç)
‚Ä¢ 45 (45 –º–∏–Ω—É—Ç)
‚Ä¢ 60 (1 —á–∞—Å)
"""
    
    keyboard = [
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="log_workout")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    message = await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    
    await track_message(context, message.message_id)


async def handle_log_from_plan(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏–∑ –ø–ª–∞–Ω–∞"""
    await cleanup_previous_messages(update, context)
    
    text = """
üìÖ *–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∏–∑ –ø–ª–∞–Ω–∞*

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏:
"""
    
    keyboard = [
        [
            InlineKeyboardButton("–ü–Ω", callback_data="log_plan_0"),
            InlineKeyboardButton("–í—Ç", callback_data="log_plan_1"),
            InlineKeyboardButton("–°—Ä", callback_data="log_plan_2"),
            InlineKeyboardButton("–ß—Ç", callback_data="log_plan_3")
        ],
        [
            InlineKeyboardButton("–ü—Ç", callback_data="log_plan_4"),
            InlineKeyboardButton("–°–±", callback_data="log_plan_5"),
            InlineKeyboardButton("–í—Å", callback_data="log_plan_6")
        ],
        [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="log_workout")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    message = await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    
    await track_message(context, message.message_id)