from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
from db.repo import get_all_training_programs, get_training_program_by_id, get_program_workouts, get_user_active_program, start_user_program, get_user_program_progress, complete_program_workout
from db.database import Session
import json
from db.models import UserProgram

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
class ReadyProgramStates:
    SELECT_PROGRAM = 1
    VIEW_PROGRAM = 2
    START_PROGRAM = 3
    VIEW_WORKOUT = 4

async def handle_ready_programs(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≥–æ—Ç–æ–≤—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º"""
    await cleanup_previous_messages(update, context)
    
    session = Session()
    programs = get_all_training_programs(session)
    session.close()
    
    if not programs:
        text = "üìö *–ì–æ—Ç–æ–≤—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã*\n\n–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º."
        keyboard = [[InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="workouts")]]
    else:
        text = "üìö *–ì–æ—Ç–æ–≤—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:"
        keyboard = []
        
        for program in programs:
            keyboard.append([
                InlineKeyboardButton(
                    f"üèãÔ∏è {program.name} ({program.duration_weeks} –Ω–µ–¥.)",
                    callback_data=f"view_program:{program.id}"
                )
            ])
        
        keyboard.append([InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="workouts")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    message = await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    
    await track_message(context, message.message_id)
    return ReadyProgramStates.SELECT_PROGRAM

async def view_program_details(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    query = update.callback_query
    program_id = int(query.data.split(":")[1])
    
    session = Session()
    program = get_training_program_by_id(session, program_id)
    session.close()
    
    if not program:
        await query.answer("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return ConversationHandler.END
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫—Ç–∏–≤–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞
    session = Session()
    user_program = get_user_active_program(session, update.effective_user.id)
    session.close()
    
    text = f"""üèãÔ∏è *{program.name}*

üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* {program.description or "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"}

üéØ *–¶–µ–ª—å:* {program.goal or "–ù–µ —É–∫–∞–∑–∞–Ω–∞"}
üìä *–£—Ä–æ–≤–µ–Ω—å:* {program.level or "–ù–µ —É–∫–∞–∑–∞–Ω"}
‚è± *–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:* {program.duration_weeks} –Ω–µ–¥–µ–ª—å
üìÖ *–¢—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ –Ω–µ–¥–µ–ª—é:* {program.days_per_week}
üèãÔ∏è‚Äç‚ôÇÔ∏è *–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ:* {program.equipment or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}

"""
    
    keyboard = []
    
    if user_program:
        if user_program.program_id == program.id:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç —ç—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—É
            keyboard.append([InlineKeyboardButton("üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å", callback_data=f"my_progress:{program.id}")])
        else:
            # –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥—Ä—É–≥–∞—è –∞–∫—Ç–∏–≤–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞
            keyboard.append([InlineKeyboardButton("‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞", callback_data="active_program_warning")])
    else:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –Ω–∞—á–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É
        keyboard.append([InlineKeyboardButton("üöÄ –ù–∞—á–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É", callback_data=f"start_program:{program.id}")])
    
    keyboard.extend([
        [InlineKeyboardButton("üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", callback_data=f"view_workouts:{program.id}")],
        [InlineKeyboardButton("‚Ü©Ô∏è –ö —Å–ø–∏—Å–∫—É –ø—Ä–æ–≥—Ä–∞–º–º", callback_data="ready_programs")]
    ])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        text=text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    
    return ReadyProgramStates.VIEW_PROGRAM

async def view_program_workouts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    query = update.callback_query
    program_id = int(query.data.split(":")[1])
    
    session = Session()
    program = get_training_program_by_id(session, program_id)
    workouts = get_program_workouts(session, program_id)
    session.close()
    
    if not program:
        await query.answer("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return ConversationHandler.END
    
    text = f"üìã *–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã '{program.name}'*\n\n"
    
    if not workouts:
        text += "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
    else:
        current_week = None
        for workout in workouts:
            if workout.week_number != current_week:
                current_week = workout.week_number
                text += f"\nüìÖ *–ù–µ–¥–µ–ª—è {current_week}*\n"
            
            text += f"  ‚Ä¢ –î–µ–Ω—å {workout.day_number}: {workout.workout_type}"
            if workout.muscle_groups:
                text += f" ({workout.muscle_groups})"
            if workout.duration_minutes:
                text += f" - {workout.duration_minutes} –º–∏–Ω"
            text += "\n"
    
    keyboard = [
        [InlineKeyboardButton("‚Ü©Ô∏è –ö –ø—Ä–æ–≥—Ä–∞–º–º–µ", callback_data=f"view_program:{program_id}")],
        [InlineKeyboardButton("‚Ü©Ô∏è –ö —Å–ø–∏—Å–∫—É –ø—Ä–æ–≥—Ä–∞–º–º", callback_data="ready_programs")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        text=text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    
    return ReadyProgramStates.VIEW_PROGRAM

async def start_program_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    query = update.callback_query
    program_id = int(query.data.split(":")[1])
    
    session = Session()
    program = get_training_program_by_id(session, program_id)
    session.close()
    
    if not program:
        await query.answer("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return ConversationHandler.END
    
    text = f"""üöÄ *–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã*

–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –Ω–∞—á–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É:
üèãÔ∏è *{program.name}*
‚è± *–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:* {program.duration_weeks} –Ω–µ–¥–µ–ª—å
üìÖ *–¢—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ –Ω–µ–¥–µ–ª—é:* {program.days_per_week}

‚ö†Ô∏è *–í–∞–∂–Ω–æ:* 
‚Ä¢ –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–º–µ–Ω–∏—Ç —Ç–µ–∫—É—â–∏–π –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
‚Ä¢ –í—ã —Å–º–æ–∂–µ—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å
‚Ä¢ –í –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–≤–æ–±–æ–¥–Ω—ã–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º

–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –Ω–∞—á–∞–ª–æ –ø—Ä–æ–≥—Ä–∞–º–º—ã?"""
    
    keyboard = [
        [InlineKeyboardButton("‚úÖ –î–∞, –Ω–∞—á–∞—Ç—å!", callback_data=f"confirm_start:{program_id}")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"view_program:{program_id}")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        text=text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    
    return ReadyProgramStates.START_PROGRAM

async def confirm_start_program(update: Update, context: ContextTypes.DEFAULT_TYPE):
	"""–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –Ω–∞—á–∞–ª–æ –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
	query = update.callback_query
	program_id = int(query.data.split(":")[1])
	
	try:
		session = Session()
		user_program = start_user_program(session, update.effective_user.id, program_id)
		
		# –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–º–µ–Ω–∏
		program = get_training_program_by_id(session, program_id)
		
		session.commit()
		session.close()
		
		text = f"""üéâ *–ü—Ä–æ–≥—Ä–∞–º–º–∞ —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∞—Ç–∞!*

üèãÔ∏è *{program.name}*
üìÖ *–ù–∞—á–∞–ª–æ:* {user_program.start_date.strftime('%d.%m.%Y')}
üìä *–¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è:* {user_program.current_week}
üìÖ *–¢–µ–∫—É—â–∏–π –¥–µ–Ω—å:* {user_program.current_day}

–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:
‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Ç–µ–∫—É—â—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
‚Ä¢ –û—Ç–º–µ—á–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–µ

–£–¥–∞—á–∏ –≤ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ —Ü–µ–ª–µ–π! üí™"""
		
		keyboard = [
			[InlineKeyboardButton("üìã –¢–µ–∫—É—â–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞", callback_data=f"current_workout:{program_id}")],
			[InlineKeyboardButton("üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å", callback_data=f"my_progress:{program_id}")],
			[InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
		]
		
		reply_markup = InlineKeyboardMarkup(keyboard)
		
		await query.edit_message_text(
			text=text,
			reply_markup=reply_markup,
			parse_mode='Markdown'
		)
		
		return ConversationHandler.END
		
	except ValueError as e:
		await query.answer(str(e))
		return ConversationHandler.END
	except Exception as e:
		await query.answer(f"–û—à–∏–±–∫–∞: {str(e)}")
		return ConversationHandler.END

async def show_my_progress(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–µ"""
    query = update.callback_query
    program_id = int(query.data.split(":")[1])
    
    session = Session()
    user_program = get_user_active_program(session, update.effective_user.id)
    
    if not user_program or user_program.program_id != program_id:
        await query.answer("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        session.close()
        return ConversationHandler.END
    
    progress = get_user_program_progress(session, user_program.id)
    session.close()
    
    text = f"""üìä *–ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–µ*

üèãÔ∏è *{user_program.program.name}*
üìÖ *–¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è:* {progress['current_week']} –∏–∑ {progress['total_weeks']}
üìÖ *–¢–µ–∫—É—â–∏–π –¥–µ–Ω—å:* {progress['current_day']} –∏–∑ {progress['days_per_week']}
‚úÖ *–í—ã–ø–æ–ª–Ω–µ–Ω–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:* {progress['completed_workouts']} –∏–∑ {progress['total_workouts']}
üìà *–ü—Ä–æ–≥—Ä–µ—Å—Å:* {progress['progress_percent']:.1f}%

"""
    
    if progress['is_completed']:
        text += "üéâ *–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!*"
    else:
        text += "üí™ *–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!*"
    
    keyboard = [
        [InlineKeyboardButton("üìã –¢–µ–∫—É—â–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞", callback_data=f"current_workout:{program_id}")],
        [InlineKeyboardButton("‚Ü©Ô∏è –ö –ø—Ä–æ–≥—Ä–∞–º–º–µ", callback_data=f"view_program:{program_id}")],
        [InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        text=text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    
    return ReadyProgramStates.VIEW_PROGRAM

async def show_current_workout(update: Update, context: ContextTypes.DEFAULT_TYPE):
	"""–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
	query = update.callback_query
	program_id = int(query.data.split(":")[1])
	
	session = Session()
	user_program = get_user_active_program(session, update.effective_user.id)
	
	if not user_program or user_program.program_id != program_id:
		await query.answer("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
		session.close()
		return ConversationHandler.END
	
	# –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É –æ—Ç–¥–µ–ª—å–Ω–æ
	program = get_training_program_by_id(session, program_id)
	
	# –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
	current_workout = get_program_workouts(
		session, 
		program_id, 
		user_program.current_week
	)
	
	current_workout = [w for w in current_workout if w.day_number == user_program.current_day]
	session.close()
	
	if not current_workout:
		text = "‚ùå –¢–µ–∫—É—â–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
		keyboard = [[InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data=f"my_progress:{program_id}")]]
	else:
		workout = current_workout[0]
		
		text = f"""üìã *–¢–µ–∫—É—â–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞*

üèãÔ∏è *–ü—Ä–æ–≥—Ä–∞–º–º–∞:* {program.name}
üìÖ *–ù–µ–¥–µ–ª—è {user_program.current_week}, –î–µ–Ω—å {user_program.current_day}*
üéØ *–¢–∏–ø:* {workout.workout_type}
üí™ *–ì—Ä—É–ø–ø—ã –º—ã—à—Ü:* {workout.muscle_groups or "–ù–µ —É–∫–∞–∑–∞–Ω—ã"}
‚è± *–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:* {workout.duration_minutes or "–ù–µ —É–∫–∞–∑–∞–Ω–∞"} –º–∏–Ω

"""
		
		if workout.exercises:
			text += "*–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:*\n"
			for i, exercise in enumerate(workout.exercises, 1):
				text += f"{i}. {exercise.get('name', '–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ')}\n"
				if exercise.get('sets') and exercise.get('reps'):
					text += f"   {exercise['sets']} x {exercise['reps']}\n"
				if exercise.get('weight'):
					text += f"   –í–µ—Å: {exercise['weight']} –∫–≥\n"
				text += "\n"
		
		keyboard = [
			[InlineKeyboardButton("‚úÖ –í—ã–ø–æ–ª–Ω–∏–ª —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É", callback_data=f"complete_workout:{program_id}")],
			[InlineKeyboardButton("üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å", callback_data=f"my_progress:{program_id}")],
			[InlineKeyboardButton("‚Ü©Ô∏è –ö –ø—Ä–æ–≥—Ä–∞–º–º–µ", callback_data=f"view_program:{program_id}")]
		]
	
	reply_markup = InlineKeyboardMarkup(keyboard)
	
	await query.edit_message_text(
		text=text,
		reply_markup=reply_markup,
		parse_mode='Markdown'
	)
	
	return ReadyProgramStates.VIEW_WORKOUT

async def complete_current_workout(update: Update, context: ContextTypes.DEFAULT_TYPE):
	"""–û—Ç–º–µ—Ç–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é"""
	query = update.callback_query
	program_id = int(query.data.split(":")[1])
	
	session = Session()
	user_program = get_user_active_program(session, update.effective_user.id)
	
	if not user_program or user_program.program_id != program_id:
		await query.answer("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
		session.close()
		return ConversationHandler.END
	
	# –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
	current_week = user_program.current_week
	current_day = user_program.current_day
	days_per_week = user_program.program.days_per_week
	duration_weeks = user_program.program.duration_weeks
	
	# –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–º–µ–Ω–∏
	program = get_training_program_by_id(session, program_id)
	
	# –û—Ç–º–µ—á–∞–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
	complete_program_workout(
		session, 
		user_program.id, 
		current_week, 
		current_day
	)
	
	session.commit()
	
	# –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
	user_program = session.get(UserProgram, user_program.id)
	session.close()
	
	text = f"""‚úÖ *–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!*

üéâ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏:
üìÖ *–ù–µ–¥–µ–ª—è {current_week}, –î–µ–Ω—å {current_day}*
üèãÔ∏è *–ü—Ä–æ–≥—Ä–∞–º–º–∞:* {program.name}

"""
	
	# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ª–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∞
	if user_program.is_completed:
		text += "üéä *–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –≤—Å—é –ø—Ä–æ–≥—Ä–∞–º–º—É!*\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –Ω–æ–≤—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–≤–æ–±–æ–¥–Ω—ã–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º."
		keyboard = [
			[InlineKeyboardButton("üìö –ù–æ–≤—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã", callback_data="ready_programs")],
			[InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
		]
	else:
		text += f"üìä *–°–ª–µ–¥—É—é—â–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞:* –ù–µ–¥–µ–ª—è {user_program.current_week}, –î–µ–Ω—å {user_program.current_day}"
		keyboard = [
			[InlineKeyboardButton("üìã –°–ª–µ–¥—É—é—â–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞", callback_data=f"current_workout:{program_id}")],
			[InlineKeyboardButton("üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å", callback_data=f"my_progress:{program_id}")],
			[InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
		]
	
	reply_markup = InlineKeyboardMarkup(keyboard)
	
	await query.edit_message_text(
		text=text,
		reply_markup=reply_markup,
		parse_mode='Markdown'
	)
	
	return ConversationHandler.END

async def handle_active_program_warning(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –Ω–∞–ª–∏—á–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    query = update.callback_query
    
    text = """‚ö†Ô∏è *–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞*

–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ–∫—É—â—É—é –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å –µ—ë.

–í—ã –º–æ–∂–µ—Ç–µ:
‚Ä¢ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç–µ–∫—É—â—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É
‚Ä¢ –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É
‚Ä¢ –î–æ–∂–¥–∞—Ç—å—Å—è –µ—ë –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
    
    keyboard = [
        [InlineKeyboardButton("üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å", callback_data="my_progress")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É", callback_data="cancel_program")],
        [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="ready_programs")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        text=text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    
    return ConversationHandler.END

# –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π –æ—á–∏—Å—Ç–∫–∏ –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
async def cleanup_previous_messages(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    pass

async def track_message(context: ContextTypes.DEFAULT_TYPE, message_id: int):
    """–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    pass