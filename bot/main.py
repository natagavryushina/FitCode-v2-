from __future__ import annotations

import asyncio
import logging
from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import Message

from services.config import settings, assert_required_settings
from services.logging import setup_logging
from db.database import engine
from db.models import Base


async def on_startup() -> None:
	# Create tables if not exist
	Base.metadata.create_all(bind=engine)


async def start_bot() -> None:
	setup_logging(settings.log_level)
	logger = logging.getLogger("bot")

	try:
		assert_required_settings()
	except Exception as exc:
		logger.error(str(exc))
		return

	bot = Bot(token=settings.telegram_bot_token, parse_mode=ParseMode.HTML)
	dp = Dispatcher()

	@dp.message(Command("start"))
	async def cmd_start(message: Message) -> None:
		await message.answer(
			"–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π —Ñ–∏—Ç–Ω–µ—Å-–Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ ü§ù\n\n" \
			"–û—Ç–ø—Ä–∞–≤—å –≥–æ–ª–æ—Å–æ–≤–æ–µ –∏–ª–∏ —Ç–µ–∫—Å—Ç ‚Äî –ø–æ–¥–±–µ—Ä—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –∏ –ø–∏—Ç–∞–Ω–∏–µ –ø–æ–¥ —Ç–≤–æ–∏ —Ü–µ–ª–∏. \n" \
			"–ö–æ–º–∞–Ω–¥—ã: /help"
		)

	@dp.message(Command("help"))
	async def cmd_help(message: Message) -> None:
		await message.answer(
			"–ö–æ—Ä–æ—Ç–∫–æ –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö:\n" \
			"‚Äî –ì–æ–ª–æ—Å –≤ —Ç–µ–∫—Å—Ç (Whisper) üé§ ‚Üí —É–º–Ω—ã–π –æ—Ç–≤–µ—Ç\n" \
			"‚Äî –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–æ–≤ üèãÔ∏è\n" \
			"‚Äî –ü–ª–∞–Ω—ã –ø–∏—Ç–∞–Ω–∏—è –ø–æ–¥ —Ü–µ–ª–∏ ü•ó\n\n" \
			"–ù–∞—á–Ω–∏ —Å –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∏–ª–∏ —Ä–∞—Å—Å–∫–∞–∂–∏ –æ —Ü–µ–ª–∏."
		)

	# Echo text as a placeholder
	@dp.message(F.text)
	async def handle_text(message: Message) -> None:
		await message.answer("–ü—Ä–∏–Ω—è–ª! –†–∞–±–æ—Ç–∞—é –Ω–∞–¥ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º üí°")

	await on_startup()
	logger.info("Bot is starting (polling)...")
	await dp.start_polling(bot)


if __name__ == "__main__":
	asyncio.run(start_bot())