from __future__ import annotations

from typing import List

from database import DailyWorkout, WeeklyWorkoutPlan, ExerciseSession


def _fmt_weight(kg: float | None) -> str:
    return f"{kg:g} –∫–≥" if kg is not None else "‚Äî"


def format_daily_workout_message(workout: DailyWorkout) -> str:
    message = f"üèãÔ∏è‚Äç‚ôÇÔ∏è *–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è* ({workout.muscle_group})\n\n"
    sessions: List[ExerciseSession] = getattr(workout, "exercise_sessions", [])
    for exercise in sessions:
        name = getattr(getattr(exercise, "exercise", None), "name", "–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ")
        message += f"*{name}*\n"
        message += f"‚Ä¢ –ü–æ–¥—Ö–æ–¥—ã: {exercise.target_sets or 0}\n"
        message += f"‚Ä¢ –ü–æ–≤—Ç–æ—Ä—ã: {exercise.target_reps or '-'}\n"
        message += f"‚Ä¢ –í–µ—Å: {_fmt_weight(exercise.target_weight)}\n"
        message += f"‚Ä¢ –û—Ç–¥—ã—Ö: {exercise.rest_time_seconds or 0} —Å–µ–∫\n"
        message += f"‚Ä¢ RPE: {exercise.rpe or 0}/10\n\n"

    message += f"‚è± –û–±—â–µ–µ –≤—Ä–µ–º—è: {int(workout.duration_minutes or 0)} –º–∏–Ω\n"
    message += f"üìä –û–±—â–∏–π –æ–±—ä–µ–º: {workout.total_volume or 0:g} –∫–≥\n"
    return message


def format_weekly_schedule_message(plan: WeeklyWorkoutPlan) -> str:
    message = "üìÖ *–ü–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –Ω–∞ –Ω–µ–¥–µ–ª—é*\n\n"
    for day in getattr(plan, "daily_workouts", []) or []:
        message += f"*–î–µ–Ω—å {day.day_number}:* {day.muscle_group}\n"
        message += f"–¢–∏–ø: {day.workout_type}\n"
        message += f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {int(day.duration_minutes or 0)} –º–∏–Ω\n\n"
    return message