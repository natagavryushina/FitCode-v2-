import logging
import os
from datetime import time, datetime
from typing import Callable

from telegram.ext import Application, CommandHandler, ContextTypes


def setup_logging() -> None:
    level = os.getenv("LOG_LEVEL", "INFO").upper()
    logging.basicConfig(
        format="%(asctime)s %(levelname)s %(name)s: %(message)s",
        level=getattr(logging, level, logging.INFO),
    )


async def _reminder_job(context) -> None:
    job = context.job
    try:
        await context.bot.send_message(chat_id=job.chat_id, text=job.data)
    except Exception:
        logging.exception("Failed to send reminder")


def schedule_reminders(app: Application) -> None:
    jq = app.job_queue
    # Example daily reminders at 09:00 local server time
    user_id = os.getenv("TEST_USER_ID")
    if user_id:
        jq.run_daily(_reminder_wrapper(int(user_id), "–ü–æ—Ä–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è!"), time=time(hour=9, minute=0))
        jq.run_daily(_reminder_wrapper(int(user_id), "–ù–µ –∑–∞–±—É–¥—å –ø–∏—Ç—å –≤–æ–¥—É üíß"), time=time(hour=12, minute=0))


def _reminder_wrapper(chat_id: int, text: str) -> Callable:
    async def _job(ctx):
        await ctx.bot.send_message(chat_id=chat_id, text=text)
    return _job


async def cmd_remind_water(update, context: ContextTypes.DEFAULT_TYPE):
    jq = context.job_queue
    chat_id = update.effective_chat.id
    jq.run_daily(_reminder_wrapper(chat_id, "–ü–æ—Ä–∞ –ø–∏—Ç—å –≤–æ–¥—É üíß"), time=time(hour=12, minute=0))
    await update.message.reply_text("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –≤–æ–¥–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ 12:00 –µ–∂–µ–¥–Ω–µ–≤–Ω–æ")


async def cmd_remind_train(update, context: ContextTypes.DEFAULT_TYPE):
    jq = context.job_queue
    chat_id = update.effective_chat.id
    jq.run_daily(_reminder_wrapper(chat_id, "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —Å–µ–≥–æ–¥–Ω—è!"), time=time(hour=9, minute=0))
    await update.message.reply_text("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ 09:00 –µ–∂–µ–¥–Ω–µ–≤–Ω–æ")


async def cmd_remind_clear(update, context: ContextTypes.DEFAULT_TYPE):
    jq = context.job_queue
    chat_id = update.effective_chat.id
    # Clear all jobs for this chat
    for job in jq.jobs():
        jq.scheduler.cancel(job)
    await update.message.reply_text("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—á–∏—â–µ–Ω—ã")


def register_reminder_commands(app: Application) -> None:
    app.add_handler(CommandHandler("remind_water", cmd_remind_water))
    app.add_handler(CommandHandler("remind_train", cmd_remind_train))
    app.add_handler(CommandHandler("remind_clear", cmd_remind_clear))


# --------- Formatters ---------

def _fmt_weight(kg: float | None) -> str:
    return f"{kg:g} –∫–≥" if kg is not None else "‚Äî"


def format_daily_workout_message(workout) -> str:
    # Lazy imports to avoid circulars
    from database import ExerciseSession
    message = f"üèãÔ∏è‚Äç‚ôÇÔ∏è *–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è* ({getattr(workout, 'muscle_group', '')})\n\n"
    sessions = getattr(workout, "exercise_sessions", [])
    for exercise in sessions:
        name = getattr(getattr(exercise, "exercise", None), "name", "–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ")
        message += f"*{name}*\n"
        message += f"‚Ä¢ –ü–æ–¥—Ö–æ–¥—ã: {exercise.target_sets or 0}\n"
        message += f"‚Ä¢ –ü–æ–≤—Ç–æ—Ä—ã: {exercise.target_reps or '-'}\n"
        message += f"‚Ä¢ –í–µ—Å: {_fmt_weight(exercise.target_weight)}\n"
        message += f"‚Ä¢ –û—Ç–¥—ã—Ö: {exercise.rest_time_seconds or 0} —Å–µ–∫\n"
        message += f"‚Ä¢ RPE: {exercise.rpe or 0}/10\n\n"
    message += f"‚è± –û–±—â–µ–µ –≤—Ä–µ–º—è: {int(getattr(workout, 'duration_minutes', 0) or 0)} –º–∏–Ω\n"
    message += f"üìä –û–±—â–∏–π –æ–±—ä–µ–º: {getattr(workout, 'total_volume', 0) or 0:g} –∫–≥\n"
    return message


def format_weekly_schedule_message(plan) -> str:
    message = "üìÖ *–ü–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –Ω–∞ –Ω–µ–¥–µ–ª—é*\n\n"
    days = getattr(plan, "daily_workouts", []) or []
    for day in days:
        message += f"*–î–µ–Ω—å {day.day_number}:* {day.muscle_group}\n"
        message += f"–¢–∏–ø: {day.workout_type}\n"
        message += f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {int(getattr(day, 'duration_minutes', 0) or 0)} –º–∏–Ω\n\n"
    return message